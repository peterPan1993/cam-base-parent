<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.base.dao.AssetSoftAuthorizeTypeDAO">
  <sql id="Base_Column_List">
    authorize_type_id, authorize_name, only_one, need_count, can_use, create_time
  </sql>

  <insert id="save" parameterType="java.util.HashMap" useGeneratedKeys="true" keyProperty="authorizeTypeId" keyColumn="authorize_type_id">
    insert into asset_soft_authorize_type
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="authorizeTypeId != null">
        authorize_type_id,
      </if>
      <if test="authorizeName != null">
        authorize_name,
      </if>
      <if test="onlyOne != null">
        only_one,
      </if>
      <if test="needCount != null">
        need_count,
      </if>
      <if test="canUse != null">
        can_use,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="authorizeTypeId != null">
        #{authorizeTypeId,jdbcType=INTEGER},
      </if>
      <if test="authorizeName != null">
        #{authorizeName,jdbcType=VARCHAR},
      </if>
      <if test="onlyOne != null">
        #{onlyOne,jdbcType=TINYINT},
      </if>
      <if test="needCount != null">
        #{needCount,jdbcType=TINYINT},
      </if>
      <if test="canUse != null">
        #{canUse,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  
  <update id="updateById">
    update asset_soft_authorize_type
    <set>
      <if test="map.authorizeName != null">
        authorize_name = #{map.authorizeName,jdbcType=VARCHAR},
      </if>
      <if test="map.onlyOne != null">
        only_one = #{map.onlyOne,jdbcType=TINYINT},
      </if>
      <if test="map.needCount != null">
        need_count = #{map.needCount,jdbcType=TINYINT},
      </if>
      <if test="map.canUse != null">
        can_use = #{map.canUse,jdbcType=TINYINT},
      </if>
      <if test="map.createTime != null">
        create_time = #{map.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where authorize_type_id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByIds">
    update asset_soft_authorize_type
    <set>
      <if test="map.authorizeName != null">
        authorize_name = #{map.authorizeName,jdbcType=VARCHAR},
      </if>
      <if test="map.onlyOne != null">
        only_one = #{map.onlyOne,jdbcType=TINYINT},
      </if>
      <if test="map.needCount != null">
        need_count = #{map.needCount,jdbcType=TINYINT},
      </if>
      <if test="map.canUse != null">
        can_use = #{map.canUse,jdbcType=TINYINT},
      </if>
      <if test="map.createTime != null">
        create_time = #{map.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where authorize_type_id in
    <foreach collection="ids" item="id" open="(" separator="," close=")">
    	#{id,jdbcType=INTEGER}
    </foreach>
  </update>
  <update id="update">
    update asset_soft_authorize_type
    <set>
      <if test="map.authorizeName != null">
        authorize_name = #{map.authorizeName,jdbcType=VARCHAR},
      </if>
      <if test="map.onlyOne != null">
        only_one = #{map.onlyOne,jdbcType=TINYINT},
      </if>
      <if test="map.needCount != null">
        need_count = #{map.needCount,jdbcType=TINYINT},
      </if>
      <if test="map.canUse != null">
        can_use = #{map.canUse,jdbcType=TINYINT},
      </if>
      <if test="map.createTime != null">
        create_time = #{map.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where 
    <trim prefixOverrides="and">
    	<if test="where.authorizeTypeId != null">
        and authorize_type_id = #{where.authorizeTypeId,jdbcType=VARCHAR}
      </if>
    	<if test="where.authorizeName != null">
        and authorize_name = #{where.authorizeName,jdbcType=VARCHAR}
      </if>
      <if test="where.onlyOne != null">
        and only_one = #{where.onlyOne,jdbcType=TINYINT}
      </if>
      <if test="where.needCount != null">
        and need_count = #{where.needCount,jdbcType=TINYINT}
      </if>
      <if test="where.canUse != null">
        and can_use = #{where.canUse,jdbcType=TINYINT}
      </if>
      <if test="where.createTime != null">
        and create_time = #{where.createTime,jdbcType=TIMESTAMP}
      </if>
    </trim>
  </update>

  <delete id="deleteById">
  	delete from asset_soft_authorize_type where authorize_type_id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByIds">
  	delete from asset_soft_authorize_type where authorize_type_id in
  	<foreach collection="ids" item="id" open="(" separator="," close=")">
    	#{id,jdbcType=INTEGER}
    </foreach>
  </delete>
  <delete id="delete">
  	delete from asset_soft_authorize_type where 
    <trim prefixOverrides="and">
    <if test="authorizeTypeId != null">
        and authorize_type_id = #{authorizeTypeId,jdbcType=VARCHAR}
      </if>
    	<if test="authorizeName != null">
        and authorize_name = #{authorizeName,jdbcType=VARCHAR}
      </if>
      <if test="onlyOne != null">
        and only_one = #{onlyOne,jdbcType=TINYINT}
      </if>
      <if test="needCount != null">
        and need_count = #{needCount,jdbcType=TINYINT}
      </if>
      <if test="canUse != null">
        and can_use = #{canUse,jdbcType=TINYINT}
      </if>
      <if test="createTime != null">
        and create_time = #{createTime,jdbcType=TIMESTAMP}
      </if>
    </trim>
  </delete>

	<select id="list" resultType="java.util.HashMap">
		select * from asset_soft_authorize_type
		<where>
			<if test="authorizeTypeId != null">
				and authorize_type_id = #{authorizeTypeId,jdbcType=VARCHAR}
			</if>
			<if test="authorizeName != null">
				and authorize_name = #{authorizeName,jdbcType=VARCHAR}
			</if>
			<if test="likeAuthorizeName != null">
				and authorize_name like concat('%', #{likeAuthorizeName,jdbcType=VARCHAR}, '%')
			</if>
			<if test="onlyOne != null">
				and only_one = #{onlyOne,jdbcType=TINYINT}
			</if>
			<if test="needCount != null">
				and need_count = #{needCount,jdbcType=TINYINT}
			</if>
			<if test="canUse != null">
				and can_use = #{canUse,jdbcType=TINYINT}
			</if>
			<if test="createTime != null">
				and create_time = #{createTime,jdbcType=TIMESTAMP}
			</if>
		</where>
	</select>
	<select id="count" resultType="java.lang.Integer">
		select count(*) from asset_soft_authorize_type
		<where>
			<if test="authorizeTypeId != null">
				and authorize_type_id = #{authorizeTypeId,jdbcType=VARCHAR}
			</if>
			<if test="authorizeName != null">
				and authorize_name = #{authorizeName,jdbcType=VARCHAR}
			</if>
			<if test="likeAuthorizeName != null">
				and authorize_name like concat('%', #{likeAuthorizeName,jdbcType=VARCHAR}, '%')
			</if>
			<if test="onlyOne != null">
				and only_one = #{onlyOne,jdbcType=TINYINT}
			</if>
			<if test="needCount != null">
				and need_count = #{needCount,jdbcType=TINYINT}
			</if>
			<if test="canUse != null">
				and can_use = #{canUse,jdbcType=TINYINT}
			</if>
			<if test="createTime != null">
				and create_time = #{createTime,jdbcType=TIMESTAMP}
			</if>
		</where>
	</select>
	<select id="listWithOrder" resultType="java.util.HashMap">
		select * from asset_soft_authorize_type
		<where>
			<if test="map.authorizeTypeId != null">
				and authorize_type_id = #{map.authorizeTypeId,jdbcType=VARCHAR}
			</if>
			<if test="map.authorizeName != null">
				and authorize_name = #{map.authorizeName,jdbcType=VARCHAR}
			</if>
			<if test="map.likeAuthorizeName != null">
				and authorize_name like concat('%', #{map.likeAuthorizeName,jdbcType=VARCHAR}, '%')
			</if>
			<if test="map.onlyOne != null">
				and only_one = #{map.onlyOne,jdbcType=TINYINT}
			</if>
			<if test="map.needCount != null">
				and need_count = #{map.needCount,jdbcType=TINYINT}
			</if>
			<if test="map.canUse != null">
				and can_use = #{map.canUse,jdbcType=TINYINT}
			</if>
			<if test="map.createTime != null">
				and create_time = #{map.createTime,jdbcType=TIMESTAMP}
			</if>
		</where>
		order by
		<foreach collection="orderSort" item="orderMap" separator=",">
			${orderMap.sort} ${orderMap.order}
		</foreach>
	</select>
	<select id="listPage" resultType="java.util.HashMap">
		select * from asset_soft_authorize_type
		<where>
			<if test="map.authorizeTypeId != null">
				and authorize_type_id = #{map.authorizeTypeId,jdbcType=VARCHAR}
			</if>
			<if test="map.authorizeName != null">
				and authorize_name = #{map.authorizeName,jdbcType=VARCHAR}
			</if>
			<if test="map.likeAuthorizeName != null">
				and authorize_name like concat('%', #{map.likeAuthorizeName,jdbcType=VARCHAR}, '%')
			</if>
			<if test="map.onlyOne != null">
				and only_one = #{map.onlyOne,jdbcType=TINYINT}
			</if>
			<if test="map.needCount != null">
				and need_count = #{map.needCount,jdbcType=TINYINT}
			</if>
			<if test="map.canUse != null">
				and can_use = #{map.canUse,jdbcType=TINYINT}
			</if>
			<if test="map.createTime != null">
				and create_time = #{map.createTime,jdbcType=TIMESTAMP}
			</if>
		</where>
		limit #{offset}, #{limit}
	</select>
	<select id="listPageWithOrder" resultType="java.util.HashMap">
		select * from asset_soft_authorize_type
		<where>
			<if test="map.authorizeTypeId != null">
				and authorize_type_id = #{map.authorizeTypeId,jdbcType=VARCHAR}
			</if>
			<if test="map.authorizeName != null">
				and authorize_name = #{map.authorizeName,jdbcType=VARCHAR}
			</if>
			<if test="map.likeAuthorizeName != null">
				and authorize_name like concat('%', #{map.likeAuthorizeName,jdbcType=VARCHAR}, '%')
			</if>
			<if test="map.onlyOne != null">
				and only_one = #{map.onlyOne,jdbcType=TINYINT}
			</if>
			<if test="map.needCount != null">
				and need_count = #{map.needCount,jdbcType=TINYINT}
			</if>
			<if test="map.canUse != null">
				and can_use = #{map.canUse,jdbcType=TINYINT}
			</if>
			<if test="map.createTime != null">
				and create_time = #{map.createTime,jdbcType=TIMESTAMP}
			</if>
		</where>
		order by
		<foreach collection="orderSort" item="orderMap" separator=",">
			${orderMap.sort} ${orderMap.order}
		</foreach>
		limit #{offset}, #{limit}
	</select>

</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.base.dao.AssetBaseDAO">
  <sql id="Base_Column_List">
    asset_id, supplier_id, type_id, asset_case, `number`, edit_number, asset_name, finance_coding, 
    `state`, unit, asset_count, price, buy_time, picture, can_use, create_time
  </sql>
  
  <insert id="save" parameterType="java.util.HashMap" useGeneratedKeys="true" keyProperty="assetId" keyColumn="asset_id">
    insert into asset_base
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="assetId != null">
        asset_id,
      </if>
      <if test="supplierId != null">
        supplier_id,
      </if>
      <if test="typeId != null">
        type_id,
      </if>
      <if test="assetCase != null">
        asset_case,
      </if>
      <if test="number != null">
        `number`,
      </if>
      <if test="editNumber != null">
        edit_number,
      </if>
      <if test="assetName != null">
        asset_name,
      </if>
      <if test="financeCoding != null">
        finance_coding,
      </if>
      <if test="state != null">
        `state`,
      </if>
      <if test="unit != null">
        unit,
      </if>
      <if test="assetCount != null">
        asset_count,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="buyTime != null">
        buy_time,
      </if>
      <if test="picture != null">
        picture,
      </if>
      <if test="canUse != null">
        can_use,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="assetId != null">
        #{assetId,jdbcType=INTEGER},
      </if>
      <if test="supplierId != null">
        #{supplierId,jdbcType=INTEGER},
      </if>
      <if test="typeId != null">
        #{typeId,jdbcType=INTEGER},
      </if>
      <if test="assetCase != null">
        #{assetCase,jdbcType=TINYINT},
      </if>
      <if test="number != null">
        #{number,jdbcType=VARCHAR},
      </if>
      <if test="editNumber != null">
        #{editNumber,jdbcType=VARCHAR},
      </if>
      <if test="assetName != null">
        #{assetName,jdbcType=VARCHAR},
      </if>
      <if test="financeCoding != null">
        #{financeCoding,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=VARCHAR},
      </if>
      <if test="unit != null">
        #{unit,jdbcType=VARCHAR},
      </if>
      <if test="assetCount != null">
        #{assetCount,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        #{price,jdbcType=DOUBLE},
      </if>
      <if test="buyTime != null">
        #{buyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="picture != null">
        #{picture,jdbcType=VARCHAR},
      </if>
      <if test="canUse != null">
        #{canUse,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  
  <update id="updateById">
    update asset_base
    <set>
      <if test="map.supplierId != null">
        supplier_id = #{map.supplierId,jdbcType=INTEGER},
      </if>
      <if test="map.typeId != null">
        type_id = #{map.typeId,jdbcType=INTEGER},
      </if>
      <if test="map.assetCase != null">
        asset_case = #{map.assetCase,jdbcType=TINYINT},
      </if>
      <if test="map.number != null">
        `number` = #{map.number,jdbcType=VARCHAR},
      </if>
      <if test="map.editNumber != null">
        edit_number = #{map.editNumber,jdbcType=VARCHAR},
      </if>
      <if test="map.assetName != null">
        asset_name = #{map.assetName,jdbcType=VARCHAR},
      </if>
      <if test="map.financeCoding != null">
        finance_coding = #{map.financeCoding,jdbcType=VARCHAR},
      </if>
      <if test="map.state != null">
        `state` = #{map.state,jdbcType=VARCHAR},
      </if>
      <if test="map.unit != null">
        unit = #{map.unit,jdbcType=VARCHAR},
      </if>
      <if test="map.assetCount != null">
        asset_count = #{map.assetCount,jdbcType=INTEGER},
      </if>
      <if test="map.price != null">
        price = #{map.price,jdbcType=DOUBLE},
      </if>
      <if test="map.buyTime != null">
        buy_time = #{map.buyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="map.picture != null">
        picture = #{map.picture,jdbcType=VARCHAR},
      </if>
      <if test="map.canUse != null">
        can_use = #{map.canUse,jdbcType=TINYINT},
      </if>
    </set>
    where asset_id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByIds">
    update asset_base
    <set>
      <if test="map.supplierId != null">
        supplier_id = #{map.supplierId,jdbcType=INTEGER},
      </if>
      <if test="map.typeId != null">
        type_id = #{map.typeId,jdbcType=INTEGER},
      </if>
      <if test="map.assetCase != null">
        asset_case = #{map.assetCase,jdbcType=TINYINT},
      </if>
      <if test="map.number != null">
        `number` = #{map.number,jdbcType=VARCHAR},
      </if>
      <if test="map.editNumber != null">
        edit_number = #{map.editNumber,jdbcType=VARCHAR},
      </if>
      <if test="map.assetName != null">
        asset_name = #{map.assetName,jdbcType=VARCHAR},
      </if>
      <if test="map.financeCoding != null">
        finance_coding = #{map.financeCoding,jdbcType=VARCHAR},
      </if>
      <if test="map.state != null">
        `state` = #{map.state,jdbcType=VARCHAR},
      </if>
      <if test="map.unit != null">
        unit = #{map.unit,jdbcType=VARCHAR},
      </if>
      <if test="map.assetCount != null">
        asset_count = #{map.assetCount,jdbcType=INTEGER},
      </if>
      <if test="map.price != null">
        price = #{map.price,jdbcType=DOUBLE},
      </if>
      <if test="map.buyTime != null">
        buy_time = #{map.buyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="map.picture != null">
        picture = #{map.picture,jdbcType=VARCHAR},
      </if>
      <if test="map.canUse != null">
        can_use = #{map.canUse,jdbcType=TINYINT},
      </if>
    </set>
    where asset_id in
    <foreach collection="ids" item="id" open="(" separator="," close=")">
    	#{id,jdbcType=INTEGER}
    </foreach>
  </update>
  <update id="update">
    update asset_base
    <set>
      <if test="map.supplierId != null">
        supplier_id = #{map.supplierId,jdbcType=INTEGER},
      </if>
      <if test="map.typeId != null">
        type_id = #{map.typeId,jdbcType=INTEGER},
      </if>
      <if test="map.assetCase != null">
        asset_case = #{map.assetCase,jdbcType=TINYINT},
      </if>
      <if test="map.number != null">
        `number` = #{map.number,jdbcType=VARCHAR},
      </if>
      <if test="map.editNumber != null">
        edit_number = #{map.editNumber,jdbcType=VARCHAR},
      </if>
      <if test="map.assetName != null">
        asset_name = #{map.assetName,jdbcType=VARCHAR},
      </if>
      <if test="map.financeCoding != null">
        finance_coding = #{map.financeCoding,jdbcType=VARCHAR},
      </if>
      <if test="map.state != null">
        `state` = #{map.state,jdbcType=VARCHAR},
      </if>
      <if test="map.unit != null">
        unit = #{map.unit,jdbcType=VARCHAR},
      </if>
      <if test="map.assetCount != null">
        asset_count = #{map.assetCount,jdbcType=INTEGER},
      </if>
      <if test="map.price != null">
        price = #{map.price,jdbcType=DOUBLE},
      </if>
      <if test="map.buyTime != null">
        buy_time = #{map.buyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="map.picture != null">
        picture = #{map.picture,jdbcType=VARCHAR},
      </if>
      <if test="map.canUse != null">
        can_use = #{map.canUse,jdbcType=TINYINT},
      </if>
    </set>
    where
    <trim prefixOverrides="and">
      <if test="where.supplierId != null">
        and supplier_id = #{where.supplierId,jdbcType=INTEGER}
      </if>
      <if test="where.typeId != null">
        and type_id = #{where.typeId,jdbcType=INTEGER}
      </if>
      <if test="where.assetCase != null">
        and asset_case = #{where.assetCase,jdbcType=TINYINT}
      </if>
      <if test="where.number != null">
        and `number` = #{where.number,jdbcType=VARCHAR}
      </if>
      <if test="where.editNumber != null">
        and edit_number = #{where.editNumber,jdbcType=VARCHAR}
      </if>
      <if test="where.assetName != null">
        and asset_name = #{where.assetName,jdbcType=VARCHAR}
      </if>
      <if test="where.financeCoding != null">
        and finance_coding = #{where.financeCoding,jdbcType=VARCHAR}
      </if>
      <if test="where.state != null">
        and `state` = #{where.state,jdbcType=VARCHAR}
      </if>
      <if test="where.unit != null">
        and unit = #{where.unit,jdbcType=VARCHAR}
      </if>
      <if test="where.assetCount != null">
        and asset_count = #{where.assetCount,jdbcType=INTEGER}
      </if>
      <if test="where.price != null">
        and price = #{where.price,jdbcType=DOUBLE}
      </if>
      <if test="where.buyTime != null">
        and buy_time = #{where.buyTime,jdbcType=TIMESTAMP}
      </if>
      <if test="where.picture != null">
        and picture = #{where.picture,jdbcType=VARCHAR}
      </if>
      <if test="where.canUse != null">
        and can_use = #{where.canUse,jdbcType=TINYINT}
      </if>
    </trim>
  </update>
  
  <delete id="deleteById">
  	delete from asset_base where asset_id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByIds">
  	delete from asset_base where asset_id in
  	<foreach collection="ids" item="id" open="(" separator="," close=")">
    	#{id,jdbcType=INTEGER}
    </foreach>
  </delete>
  <delete id="delete">
  	delete from asset_base where
  	<trim prefixOverrides="and">
      <if test="supplierId != null">
        and supplier_id = #{supplierId,jdbcType=INTEGER}
      </if>
      <if test="typeId != null">
        and type_id = #{typeId,jdbcType=INTEGER}
      </if>
      <if test="assetCase != null">
        and asset_case = #{assetCase,jdbcType=TINYINT}
      </if>
      <if test="number != null">
        and `number` = #{number,jdbcType=VARCHAR}
      </if>
      <if test="editNumber != null">
        and edit_number = #{editNumber,jdbcType=VARCHAR}
      </if>
      <if test="assetName != null">
        and asset_name = #{assetName,jdbcType=VARCHAR}
      </if>
      <if test="financeCoding != null">
        and finance_coding = #{financeCoding,jdbcType=VARCHAR}
      </if>
      <if test="state != null">
        and `state` = #{state,jdbcType=VARCHAR}
      </if>
      <if test="unit != null">
        and unit = #{unit,jdbcType=VARCHAR}
      </if>
      <if test="assetCount != null">
        and asset_count = #{assetCount,jdbcType=INTEGER}
      </if>
      <if test="price != null">
        and price = #{price,jdbcType=DOUBLE}
      </if>
      <if test="buyTime != null">
        and buy_time = #{buyTime,jdbcType=TIMESTAMP}
      </if>
      <if test="picture != null">
        and picture = #{picture,jdbcType=VARCHAR}
      </if>
      <if test="canUse != null">
        and can_use = #{canUse,jdbcType=TINYINT}
      </if>
    </trim>
  </delete>
  
  <select id="list" resultType="java.util.HashMap">
  	select ba.*,
  		su.supplier_name, su.supplier_phone, su.supplier_address, su.supplier_memo,
  		ty.type_name, ty.type_memo, ty.type_case
  	from asset_base ba left join asset_base_supplier su on ba.supplier_id = su.supplier_id
  		left join asset_base_type ty on ba.type_id = ty.type_id
  	<where>
  	  <if test="assetId != null">
        and ba.asset_id = #{assetId,jdbcType=INTEGER}
      </if>
  	  <if test="supplierId != null">
        and ba.supplier_id = #{supplierId,jdbcType=INTEGER}
      </if>
      <if test="typeId != null">
        and ba.type_id = #{typeId,jdbcType=INTEGER}
      </if>
      <if test="assetCase != null">
        and ba.asset_case = #{assetCase,jdbcType=TINYINT}
      </if>
      <if test="number != null">
        and ba.`number` = #{number,jdbcType=VARCHAR}
      </if>
      <if test="likeNumber != null">
        and ba.`number` like concat('%', #{likeNumber,jdbcType=VARCHAR}, '%')
      </if>
      <if test="editNumber != null">
        and ba.edit_number = #{editNumber,jdbcType=VARCHAR}
      </if>
      <if test="likeEditNumber != null">
        and ba.edit_number like concat('%', #{likeEditNumber,jdbcType=VARCHAR}, '%')
      </if>
      <if test="assetName != null">
        and ba.asset_name = #{assetName,jdbcType=VARCHAR}
      </if>
      <if test="likeAssetName != null">
        and ba.asset_name like concat('%', #{likeAssetName,jdbcType=VARCHAR}, '%')
      </if>
      <if test="financeCoding != null">
        and ba.finance_coding = #{financeCoding,jdbcType=VARCHAR}
      </if>
      <if test="likeFinanceCoding != null">
        and ba.finance_coding like concat('%', #{likeFinanceCoding,jdbcType=VARCHAR}, '%')
      </if>
      <if test="state != null">
        and ba.`state` = #{state,jdbcType=VARCHAR}
      </if>
      <if test="unit != null">
        and ba.unit = #{unit,jdbcType=VARCHAR}
      </if>
      <if test="assetCount != null">
        and ba.asset_count = #{assetCount,jdbcType=INTEGER}
      </if>
      <if test="price != null">
        and ba.price = #{price,jdbcType=DOUBLE}
      </if>
      <if test="buyTime != null">
        and ba.buy_time = #{buyTime,jdbcType=TIMESTAMP}
      </if>
      <if test="picture != null">
        and ba.picture = #{picture,jdbcType=VARCHAR}
      </if>
      <if test="canUse != null">
        and ba.can_use = #{canUse,jdbcType=TINYINT}
      </if>
      </where>
  </select>
  <select id="count" resultType="java.lang.Integer">
  	select count(*)
  	from asset_base ba left join asset_base_supplier su on ba.supplier_id = su.supplier_id
  		left join asset_base_type ty on ba.type_id = ty.type_id
  	<where>
  	  <if test="assetId != null">
        and ba.asset_id = #{assetId,jdbcType=INTEGER}
      </if>
  	  <if test="supplierId != null">
        and ba.supplier_id = #{supplierId,jdbcType=INTEGER}
      </if>
      <if test="typeId != null">
        and ba.type_id = #{typeId,jdbcType=INTEGER}
      </if>
      <if test="assetCase != null">
        and ba.asset_case = #{assetCase,jdbcType=TINYINT}
      </if>
      <if test="number != null">
        and ba.`number` = #{number,jdbcType=VARCHAR}
      </if>
      <if test="likeNumber != null">
        and ba.`number` like concat('%', #{likeNumber,jdbcType=VARCHAR}, '%')
      </if>
      <if test="editNumber != null">
        and ba.edit_number = #{editNumber,jdbcType=VARCHAR}
      </if>
      <if test="likeEditNumber != null">
        and ba.edit_number like concat('%', #{likeEditNumber,jdbcType=VARCHAR}, '%')
      </if>
      <if test="assetName != null">
        and ba.asset_name = #{assetName,jdbcType=VARCHAR}
      </if>
      <if test="likeAssetName != null">
        and ba.asset_name like concat('%', #{likeAssetName,jdbcType=VARCHAR}, '%')
      </if>
      <if test="financeCoding != null">
        and ba.finance_coding = #{financeCoding,jdbcType=VARCHAR}
      </if>
      <if test="likeFinanceCoding != null">
        and ba.finance_coding like concat('%', #{likeFinanceCoding,jdbcType=VARCHAR}, '%')
      </if>
      <if test="state != null">
        and ba.`state` = #{state,jdbcType=VARCHAR}
      </if>
      <if test="unit != null">
        and ba.unit = #{unit,jdbcType=VARCHAR}
      </if>
      <if test="assetCount != null">
        and ba.asset_count = #{assetCount,jdbcType=INTEGER}
      </if>
      <if test="price != null">
        and ba.price = #{price,jdbcType=DOUBLE}
      </if>
      <if test="buyTime != null">
        and ba.buy_time = #{buyTime,jdbcType=TIMESTAMP}
      </if>
      <if test="picture != null">
        and ba.picture = #{picture,jdbcType=VARCHAR}
      </if>
      <if test="canUse != null">
        and ba.can_use = #{canUse,jdbcType=TINYINT}
      </if>
      </where>
  </select>
  <select id="listWithOrder" resultType="java.util.HashMap">
  	select ba.*,
  		su.supplier_name, su.supplier_phone, su.supplier_address, su.supplier_memo,
  		ty.type_name, ty.type_memo, ty.type_case
  	from asset_base ba left join asset_base_supplier su on ba.supplier_id = su.supplier_id
  		left join asset_base_type ty on ba.type_id = ty.type_id
  	<where>
  	  <if test="map.assetId != null">
        and ba.asset_id = #{map.assetId,jdbcType=INTEGER}
      </if>
  	  <if test="map.supplierId != null">
        and ba.supplier_id = #{map.supplierId,jdbcType=INTEGER}
      </if>
      <if test="map.typeId != null">
        and ba.type_id = #{map.typeId,jdbcType=INTEGER}
      </if>
      <if test="map.assetCase != null">
        and ba.asset_case = #{map.assetCase,jdbcType=TINYINT}
      </if>
      <if test="map.number != null">
        and ba.`number` = #{map.number,jdbcType=VARCHAR}
      </if>
      <if test="map.likeNumber != null">
        and ba.`number` like concat('%', #{map.likeNumber,jdbcType=VARCHAR}, '%')
      </if>
      <if test="map.editNumber != null">
        and ba.edit_number = #{map.editNumber,jdbcType=VARCHAR}
      </if>
      <if test="map.likeEditNumber != null">
        and ba.edit_number like concat('%', #{map.likeEditNumber,jdbcType=VARCHAR}, '%')
      </if>
      <if test="map.assetName != null">
        and ba.asset_name = #{map.assetName,jdbcType=VARCHAR}
      </if>
      <if test="map.likeAssetName != null">
        and ba.asset_name like concat('%', #{map.likeAssetName,jdbcType=VARCHAR}, '%')
      </if>
      <if test="map.financeCoding != null">
        and ba.finance_coding = #{map.financeCoding,jdbcType=VARCHAR}
      </if>
      <if test="map.likeFinanceCoding != null">
        and ba.finance_coding like concat('%', #{map.likeFinanceCoding,jdbcType=VARCHAR}, '%')
      </if>
      <if test="map.state != null">
        and ba.`state` = #{map.state,jdbcType=VARCHAR}
      </if>
      <if test="map.unit != null">
        and ba.unit = #{map.unit,jdbcType=VARCHAR}
      </if>
      <if test="map.assetCount != null">
        and ba.asset_count = #{map.assetCount,jdbcType=INTEGER}
      </if>
      <if test="map.price != null">
        and ba.price = #{map.price,jdbcType=DOUBLE}
      </if>
      <if test="map.buyTime != null">
        and ba.buy_time = #{map.buyTime,jdbcType=TIMESTAMP}
      </if>
      <if test="map.picture != null">
        and ba.picture = #{map.picture,jdbcType=VARCHAR}
      </if>
      <if test="map.canUse != null">
        and ba.can_use = #{map.canUse,jdbcType=TINYINT}
      </if>
      </where>
		order by
		<foreach collection="orderSort" item="orderMap" separator=",">
			${orderMap.sort} ${orderMap.order}
		</foreach>
  </select>
  <select id="listPage" resultType="java.util.HashMap">
  	select ba.*,
  		su.supplier_name, su.supplier_phone, su.supplier_address, su.supplier_memo,
  		ty.type_name, ty.type_memo, ty.type_case
  	from asset_base ba left join asset_base_supplier su on ba.supplier_id = su.supplier_id
  		left join asset_base_type ty on ba.type_id = ty.type_id
  	<where>
  	  <if test="map.assetId != null">
        and ba.asset_id = #{map.assetId,jdbcType=INTEGER}
      </if>
  	  <if test="map.supplierId != null">
        and ba.supplier_id = #{map.supplierId,jdbcType=INTEGER}
      </if>
      <if test="map.typeId != null">
        and ba.type_id = #{map.typeId,jdbcType=INTEGER}
      </if>
      <if test="map.assetCase != null">
        and ba.asset_case = #{map.assetCase,jdbcType=TINYINT}
      </if>
      <if test="map.number != null">
        and ba.`number` = #{map.number,jdbcType=VARCHAR}
      </if>
      <if test="map.likeNumber != null">
        and ba.`number` like concat('%', #{map.likeNumber,jdbcType=VARCHAR}, '%')
      </if>
      <if test="map.editNumber != null">
        and ba.edit_number = #{map.editNumber,jdbcType=VARCHAR}
      </if>
      <if test="map.likeEditNumber != null">
        and ba.edit_number like concat('%', #{map.likeEditNumber,jdbcType=VARCHAR}, '%')
      </if>
      <if test="map.assetName != null">
        and ba.asset_name = #{map.assetName,jdbcType=VARCHAR}
      </if>
      <if test="map.likeAssetName != null">
        and ba.asset_name like concat('%', #{map.likeAssetName,jdbcType=VARCHAR}, '%')
      </if>
      <if test="map.financeCoding != null">
        and ba.finance_coding = #{map.financeCoding,jdbcType=VARCHAR}
      </if>
      <if test="map.likeFinanceCoding != null">
        and ba.finance_coding like concat('%', #{map.likeFinanceCoding,jdbcType=VARCHAR}, '%')
      </if>
      <if test="map.state != null">
        and ba.`state` = #{map.state,jdbcType=VARCHAR}
      </if>
      <if test="map.unit != null">
        and ba.unit = #{map.unit,jdbcType=VARCHAR}
      </if>
      <if test="map.assetCount != null">
        and ba.asset_count = #{map.assetCount,jdbcType=INTEGER}
      </if>
      <if test="map.price != null">
        and ba.price = #{map.price,jdbcType=DOUBLE}
      </if>
      <if test="map.buyTime != null">
        and ba.buy_time = #{map.buyTime,jdbcType=TIMESTAMP}
      </if>
      <if test="map.picture != null">
        and ba.picture = #{map.picture,jdbcType=VARCHAR}
      </if>
      <if test="map.canUse != null">
        and ba.can_use = #{map.canUse,jdbcType=TINYINT}
      </if>
      </where>
      limit #{offset}, #{limit}
  </select>
  <select id="listPageWithOrder" resultType="java.util.HashMap">
  	select ba.*,
  		su.supplier_name, su.supplier_phone, su.supplier_address, su.supplier_memo,
  		ty.type_name, ty.type_memo, ty.type_case
  	from asset_base ba left join asset_base_supplier su on ba.supplier_id = su.supplier_id
  		left join asset_base_type ty on ba.type_id = ty.type_id
  	<where>
  	  <if test="map.assetId != null">
        and ba.asset_id = #{map.assetId,jdbcType=INTEGER}
      </if>
  	  <if test="map.supplierId != null">
        and ba.supplier_id = #{map.supplierId,jdbcType=INTEGER}
      </if>
      <if test="map.typeId != null">
        and ba.type_id = #{map.typeId,jdbcType=INTEGER}
      </if>
      <if test="map.assetCase != null">
        and ba.asset_case = #{map.assetCase,jdbcType=TINYINT}
      </if>
      <if test="map.number != null">
        and ba.`number` = #{map.number,jdbcType=VARCHAR}
      </if>
      <if test="map.likeNumber != null">
        and ba.`number` like concat('%', #{map.likeNumber,jdbcType=VARCHAR}, '%')
      </if>
      <if test="map.editNumber != null">
        and ba.edit_number = #{map.editNumber,jdbcType=VARCHAR}
      </if>
      <if test="map.likeEditNumber != null">
        and ba.edit_number like concat('%', #{map.likeEditNumber,jdbcType=VARCHAR}, '%')
      </if>
      <if test="map.assetName != null">
        and ba.asset_name = #{map.assetName,jdbcType=VARCHAR}
      </if>
      <if test="map.likeAssetName != null">
        and ba.asset_name like concat('%', #{map.likeAssetName,jdbcType=VARCHAR}, '%')
      </if>
      <if test="map.financeCoding != null">
        and ba.finance_coding = #{map.financeCoding,jdbcType=VARCHAR}
      </if>
      <if test="map.likeFinanceCoding != null">
        and ba.finance_coding like concat('%', #{map.likeFinanceCoding,jdbcType=VARCHAR}, '%')
      </if>
      <if test="map.state != null">
        and ba.`state` = #{map.state,jdbcType=VARCHAR}
      </if>
      <if test="map.unit != null">
        and ba.unit = #{map.unit,jdbcType=VARCHAR}
      </if>
      <if test="map.assetCount != null">
        and ba.asset_count = #{map.assetCount,jdbcType=INTEGER}
      </if>
      <if test="map.price != null">
        and ba.price = #{map.price,jdbcType=DOUBLE}
      </if>
      <if test="map.buyTime != null">
        and ba.buy_time = #{map.buyTime,jdbcType=TIMESTAMP}
      </if>
      <if test="map.picture != null">
        and ba.picture = #{map.picture,jdbcType=VARCHAR}
      </if>
      <if test="map.canUse != null">
        and ba.can_use = #{map.canUse,jdbcType=TINYINT}
      </if>
      </where>
		order by
		<foreach collection="orderSort" item="orderMap" separator=",">
			${orderMap.sort} ${orderMap.order}
		</foreach>
      limit #{offset}, #{limit}
  </select>
  
  <update id="dropBaseTable">
  	DROP TABLE IF EXISTS `asset_base`;
  </update>
  <update id="dropBaseFixedTable">
  	DROP TABLE IF EXISTS `asset_base_fixed`;
  </update>
  <update id="dropBaseFlowTable">
  	DROP TABLE IF EXISTS `asset_base_flow`;
  </update>
  <update id="dropBaseInteTable">
  	DROP TABLE IF EXISTS `asset_base_inte`;
  </update>
  <update id="dropBaseSoftTable">
  	DROP TABLE IF EXISTS `asset_base_soft`;
  </update>
  <update id="dropBaseSupplierTable">
  	DROP TABLE IF EXISTS `asset_base_supplier`;
  </update>
  <update id="dropBaseTypeTable">
  	DROP TABLE IF EXISTS `asset_base_type`;
  </update>
  <update id="dropSoftAttrTable">
  	DROP TABLE IF EXISTS `asset_soft_attr`;
  </update>
  <update id="dropSoftAuthorizeTypeTable">
  	DROP TABLE IF EXISTS `asset_soft_authorize_type`;
  </update>
  <update id="dropSoftModeTable">
  	DROP TABLE IF EXISTS `asset_soft_mode`;
  </update>
  <update id="dropSoftTypeTable">
  	DROP TABLE IF EXISTS `asset_soft_type`;
  </update>
  <update id="dropSoftwareTable">
  	DROP TABLE IF EXISTS `asset_software`;
  </update>
  
  <update id="createBaseTable">
  	CREATE TABLE if not EXISTS `asset_base` (
  `asset_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `supplier_id` int(11) DEFAULT NULL COMMENT '供应商',
  `type_id` int(11) NOT NULL COMMENT '资产类别',
  `asset_case` tinyint(4) NOT NULL COMMENT '类型（业务分类）',
  `number` varchar(64) NOT NULL COMMENT '资产编号',
  `edit_number` varchar(64) DEFAULT NULL COMMENT '资产自编码',
  `asset_name` varchar(64) NOT NULL COMMENT '资产名称',
  `finance_coding` varchar(64) DEFAULT NULL COMMENT '财务编码',
  `state` varchar(64) NOT NULL COMMENT '资产状态',
  `unit` varchar(5) DEFAULT NULL COMMENT '计量单位',
  `asset_count` int(11) NOT NULL DEFAULT '0' COMMENT '数量',
  `price` double(15,2) NOT NULL DEFAULT '0.00' COMMENT '单价',
  `buy_time` datetime DEFAULT NULL COMMENT '购买日期',
  `picture` varchar(1024) DEFAULT NULL COMMENT '图片',
  `can_use` tinyint(4) NOT NULL DEFAULT '1' COMMENT '1可用',
  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`asset_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='资产基础信息';
  </update>
  <update id="createBaseFixedTable">
  	CREATE TABLE if not EXISTS `asset_base_fixed` (
  `own_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'own_id',
  `asset_id` int(11) NOT NULL COMMENT 'foreign_id',
  `version` varchar(64) DEFAULT NULL COMMENT '型号/规格',
  `producer` varchar(64) DEFAULT NULL COMMENT '生产厂家',
  `plant_time` datetime DEFAULT NULL COMMENT '出厂日期',
  `plant_number` varchar(64) DEFAULT NULL COMMENT '出厂编号',
  `age_limit` int(11) DEFAULT NULL COMMENT '使用年限',
  PRIMARY KEY (`own_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='固定资产';
  </update>
  <update id="createBaseFlowTable">
  	CREATE TABLE if not EXISTS `asset_base_flow` (
  `own_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'own_id',
  `asset_id` int(11) NOT NULL COMMENT 'foreign_id',
  `specification` varchar(64) DEFAULT NULL COMMENT '规格',
  PRIMARY KEY (`own_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='易耗品';
  </update>
  <update id="createBaseInteTable">
  	CREATE TABLE if not EXISTS `asset_base_inte` (
  `own_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'own_id',
  `asset_id` int(11) NOT NULL COMMENT 'foreign_id',
  `cpu_info` varchar(518) DEFAULT NULL COMMENT 'CPU信息',
  `cpu_sn` varchar(518) DEFAULT NULL COMMENT 'CPU序号',
  `memory_info` varchar(518) DEFAULT NULL COMMENT '内存信息',
  `memory_sn` varchar(518) DEFAULT NULL COMMENT '内存序号',
  `hard_disk_info` varchar(518) DEFAULT NULL COMMENT '硬盘详细信息',
  `hard_disk_sn` varchar(518) DEFAULT NULL COMMENT '硬盘序号',
  `mainboard_info` varchar(518) DEFAULT NULL COMMENT '主板',
  `mainboard_sn` varchar(518) DEFAULT NULL COMMENT '主板序号',
  `ip_addr` varchar(518) DEFAULT NULL COMMENT 'IP地址',
  `mac` varchar(518) DEFAULT NULL COMMENT 'mac地址',
  `display_card_info` varchar(518) DEFAULT NULL COMMENT '显卡',
  `os_desc` varchar(518) DEFAULT NULL COMMENT '操作系统',
  `age_limit` int(11) DEFAULT NULL COMMENT '使用年限',
  PRIMARY KEY (`own_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='IT资产';
  </update>
  <update id="createBaseSoftTable">
  	CREATE TABLE if not EXISTS `asset_base_soft` (
  `own_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'own_id',
  `asset_id` int(11) NOT NULL COMMENT 'foreign_id',
  `authorize_type_id` int(11) DEFAULT NULL COMMENT '授权类型(0无需授权)',
  `mode_id` int(11) DEFAULT NULL COMMENT '软件类型',
  `attr_id` int(11) DEFAULT NULL COMMENT '软件属性',
  `version` varchar(518) DEFAULT NULL COMMENT '版本',
  `overdue_time` datetime DEFAULT NULL COMMENT '过期时间',
  `manufacturer` varchar(128) DEFAULT NULL COMMENT '厂商',
  `manufacturer_phone` varchar(15) DEFAULT NULL COMMENT '厂商电话',
  PRIMARY KEY (`own_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='软件资产';
  </update>
  <update id="createBaseSupplierTable">
  	CREATE TABLE if not EXISTS `asset_base_supplier` (
  `supplier_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'own_id',
  `supplier_name` varchar(64) NOT NULL COMMENT '供应商名称',
  `supplier_phone` varchar(15) DEFAULT NULL COMMENT '供应商电话',
  `supplier_address` varchar(128) DEFAULT NULL COMMENT '供应商地址',
  `supplier_memo` varchar(518) DEFAULT NULL COMMENT '备注',
  `can_use` tinyint(4) NOT NULL DEFAULT '1' COMMENT '1可用',
  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`supplier_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='供应商';
  </update>
  <update id="createBaseTypeTable">
  	CREATE TABLE if not EXISTS `asset_base_type` (
  `type_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'own_id',
  `type_name` varchar(64) NOT NULL COMMENT '类别名称',
  `type_memo` varchar(518) DEFAULT NULL COMMENT '备注',
  `type_case` tinyint(4) NOT NULL COMMENT '1: 固定资产;2: 易耗品;3: IT资产;4:软件资产',
  `can_use` tinyint(4) NOT NULL DEFAULT '1' COMMENT '1可用',
  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`type_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='资产类别';
  </update>
  <update id="createSoftAttrTable">
  	CREATE TABLE if not EXISTS `asset_soft_attr` (
  `attr_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'own_id',
  `attr_name` varchar(64) NOT NULL COMMENT '软件属性名称',
  `attr_type` tinyint(4) NOT NULL COMMENT '0:国内;1:国外',
  `can_use` tinyint(4) NOT NULL DEFAULT '1' COMMENT '1可用',
  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`attr_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='软件属性';
  </update>
  <update id="createSoftAuthorizeTypeTable">
  	CREATE TABLE if not EXISTS `asset_soft_authorize_type` (
  `authorize_type_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'own_id',
  `authorize_name` varchar(64) NOT NULL COMMENT '授权类型名称',
  `only_one` tinyint(4) NOT NULL COMMENT '是否一一对应的授权，例如:1,为序列号、加密狗;0,为其他',
  `need_count` tinyint(4) NOT NULL COMMENT '是否需要授权数量，例如:1,订阅授权;0,场地授权等不需要统计的',
  `can_use` tinyint(4) NOT NULL DEFAULT '1' COMMENT '1可用',
  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`authorize_type_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='软件授权类型';
  </update>
  <update id="createSoftModeTable">
  	CREATE TABLE if not EXISTS `asset_soft_mode` (
  `mode_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'own_id',
  `mode_name` varchar(64) NOT NULL COMMENT '软件类型名称',
  `need_authorize` tinyint(4) NOT NULL COMMENT '是否需要授权',
  `can_use` tinyint(4) NOT NULL DEFAULT '1' COMMENT '1可用',
  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`mode_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='软件类型';
  </update>
  <update id="createSoftTypeTable">
  	CREATE TABLE if not EXISTS `asset_soft_type` (
  `software_type_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '序号',
  `mode_id` int(11) NOT NULL COMMENT '软件类型',
  `attr_id` int(11) NOT NULL COMMENT '软件属性',
  `sign_name` varchar(518) NOT NULL COMMENT '标记名称',
  `version` varchar(64) DEFAULT NULL COMMENT '软件版本',
  `manufacturer` varchar(518) DEFAULT NULL COMMENT '厂商名称',
  `manufacturer_phone` varchar(16) DEFAULT NULL COMMENT '厂商电话',
  `authorize_type_id` int(11) DEFAULT NULL COMMENT '许可类型;1:序列号授权;2:加密狗授权;3:场地授权;4:订阅授权;5:租赁授权',
  `license_time` date DEFAULT NULL COMMENT '许可期限',
  `create_time` datetime DEFAULT NULL COMMENT '标记时间即创建时间',
  `is_hide` tinyint(4) DEFAULT '0' COMMENT '是否隐藏。0：否；1：是',
  `authorize_count` int(11) DEFAULT '0' COMMENT '可授权数量，需授权的软件类型超出该数量的软件为盗版',
  `software_type_num` varchar(128) DEFAULT NULL COMMENT '软件标识编号',
  PRIMARY KEY (`software_type_id`),
  UNIQUE KEY `sign_name` (`sign_name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='软件标识库';
  </update>
  <update id="createSoftwareTable">
  	CREATE TABLE if not EXISTS `asset_software` (
  `software_id` int(32) NOT NULL AUTO_INCREMENT,
  `software_type_id` int(32) DEFAULT NULL COMMENT '软件标识id',
  `inte_id` varchar(518) NOT NULL COMMENT '软件安装的电脑，对应asset_base_inte的own_id',
  `soft_name` varchar(518) NOT NULL COMMENT '软件名称',
  `version` varchar(64) DEFAULT NULL COMMENT '软件版本',
  `is_hide` tinyint(4) DEFAULT '0' COMMENT '是否隐藏。0：否；1：是',
  `is_install` tinyint(4) DEFAULT '1' COMMENT '软件使用中或卸载；1：使用中',
  `install_date` datetime DEFAULT NULL COMMENT '软件安装时间',
  `create_time` datetime DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`software_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='软件安装情况';
  </update>
</mapper>